/** Fichier de réponses du TP1 - Tom REDON - Groupe 2 - M1 UGE **/

/** Exercice 1 : **/
/* Question 1 : */
Les avantages d'un langage compilé vis à vis d'autres types sont sa rapidité d'exécution, ainsi qu'il puisse donc être exécuté
directement sur le système d'exploitation, sans appeler un interpréteur à chaque fois.
Les désaventages d'un langage compilé vis à vis d'autres types sont que les exécutables ne sont pas portables. Il faudra
donc fournir le code-source pour pouvoir recompiler le code sur le système utilisé.

/* Question 2 : */
Une erreur de compilation est une erreur qui empèche le programme de compilé et qui se produira lors de l'appel au compilateur.
On peut donc la corriger en observant les erreurs renvoyés par la compilateur, et en tentant de les résoudre.
Le compilateur ne produira donc pas de fichier exécutable.
Une erreur d'exécution est une erreur qui arrive pendant l'exécution du programme.
Il faudra donc effectuer des tests (print de values, vérification d'état du programme, ...) pour pouvoir déterminer d'où vient
l'erreur.

/* Question 3 : */
Undefined behavior signifie que le programme n'est pas capable de gérer un certain état, car on ne lui garantit pas une
que cet état sera supporté par le standard ou par le programme en lui-même.
Un programme peut-être compilé avec un code classifié comme UB (on peut le voir dans l'exemple situé dans le dossier Exercice1).
Cependant le code émet un warning à la compilation et relève une exception lors de l'exécution.




/** Exercice 2 : **/
/* Question 1 : */
Il y a des erreurs sur les lignes b3, c8, d10, d11, d12, i16, i18 et b20, sans l'option -Werror.
Il y a des erreurs sur les lignes b3, c8, d10, d11, d12, i16, i18 et b20, avec l'option -Werror.
Pour corriger ces erreurs, il faut : 
- b3 : "non-constant-expression" : On peut faire un cast sur i1, pour le "convertir" en boolean.
- c8 : "Initialize a variable of type 'char' with an lvalue of type 'const char [2]'" :
        On peut changer les "" en '' pour éliminer l'erreur.
- d10 : "non-constant-expression" : On peut faire un cast sur i1 en utilisant static_cast<double>.
- d11 : "cannot initialize a variable of type 'double *' with an lvalue of type 'double'" :
        On peut utiliser un '&' devant d10, pour pouvoir donner l'addresse de d10 au lieu de donner sa valeur.
- d12 : "declaration of reference variable 'd12' requires an initializer" :
        On peut initialiser la variable en utilisant *d11.
- i16 : "cannot initialize a variable of type 'int *' with an rvalue of type 'bool *'" :
        On peut faire un cast de la façon suivante : int* i16 = (int *) &b2;.
- i18 : "binding value of type 'const int' to reference to type 'int' drops 'const' qualifier" :
        On peut faire un cast de la façon suivante : int& i18{(int&) i14};.
- b20 : "default initialization of an object of const type 'const bool'" :
        Il faut définir une valeur de base à une constante.

/* Question 2 : */
La valeur de s0 est : 0.
La valeur de *i15 est : 2.
La valeur de ul7 est : 65543.







/** Exercice 3 : **/
/* Question 1 : */
Les signatures de fonctions sont donc devenues les suivantes :
int add(int a, int b); (On prend deux entiers et on retourne l'addition de ces deux entiers).
void add_to(int & a, int b); (On prend une addresse et un entier et on ne retourne rien après l'ajout de 
                            l'entier à l'addresse).
void another_add_to(int * a, int b); (On prend un pointeur et un entier et on ne retourne rien après l'addition 
                                    entre l'entier désigné par le pointeur et l'entier).

/* Question 2 : */
On va utiliser le passage par valeur, quand on veut utiliser la valeur d'une variable, sans la modifier dans la fonction.
On va utiliser le passage par référence pour les fonctions qui vont modifier les variables passées en paramètre.
On va utiliser le passage par référence constante pour passer des paramètres à la fonction qui sont trop coûteux à copier.

/* Question 3 : */
J'aurais fait les modifications suivantes : 
int         count_a_occurences(std::string& s);
void        update_loop(const float& dt, std::string*& errors_out);
bool        are_all_positives(std::vector<int>& values, int* negative_indices_out, size_t* negative_count_out);
std::string* concatenate(char* str1, char* str2);




/** Exercice 4 : **/



/** Exercice 5 : **/